import {
  Client,
  Embed,
  GatewayIntents,
  Guild,
  Interaction,
  SlashCommandOptionType,
  SlashCommandPartial,
  ActivityType,
  files,
} from "./deps/deps.ts";
const LOG_CHANNEL_ID = Deno.env.get("LOG_CHANNEL_ID") || "";
const token = Deno.env.get("DISCORD_TOKEN") || "";
if (token === "") throw new Error("TOKEN is not set.");
if (LOG_CHANNEL_ID === "") throw new Error("LOG_CHANNEL_ID is not set.");

const client = new Client({
  intents: [GatewayIntents.GUILDS | GatewayIntents.GUILD_MEMBERS],
  token: token,
  presence: {
    activity: {
      name: `Ëµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åô...`,
      type: ActivityType.Playing,
    },
    status: "idle",
  },
});
import { serve } from "https://deno.land/std@0.171.0/http/server.ts";
function handler(): Response {
  return new Response(
    '<!DOCTYPE html><html lang="en"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><title>EightBot</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous" /> <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.1/dist/js.cookie.min.js"></script></head><body style="text-align: center;"><h1>EightBot „ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</h1> <button type="button" class="btn btn-success  btn-lg" disabled>Âãï‰Ωú‰∏≠ÔºÅ</button><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script></body></html> ',
    { headers: { "Content-Type": "text/html" } }
  );
}

serve(handler, { port: 12312 });
client.once("ready", async () => {
  const commands: SlashCommandPartial[] = [
    {
      type: "CHAT_INPUT",
      name: "ping",
      description: "Bot„ÅÆÁèæÂú®„ÅÆpingÂÄ§„ÇíËøî„Åó„Åæ„Åô„ÄÇ",
      options: [],
    },
    {
      type: "CHAT_INPUT",
      name: "invite",
      description: "ÊåáÂÆö„Åó„ÅüBot„ÅÆÊãõÂæÖ„É™„É≥„ÇØ„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ",
      options: [
        {
          name: "bot",
          description: "Bot",
          required: true,
          type: SlashCommandOptionType.USER,
        },
      ],
    },
    {
      type: "CHAT_INPUT",
      name: "totuzen",
      description: "Á™ÅÁÑ∂„ÅÆÊ≠ª„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ",
      options: [
        {
          name: "text",
          description: "„ÉÜ„Ç≠„Çπ„Éà",
          type: SlashCommandOptionType.STRING,
          required: true,
        },
      ],
    },
    {
      type: "CHAT_INPUT",
      name: "5000",
      description: "5000ÂÖÜÂÜÜÊ¨≤„Åó„ÅÑ„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ",
      options: [
        {
          name: "top",
          description: "‰∏äÈÉ®ÊñáÂ≠óÂàó",
          type: SlashCommandOptionType.STRING,
          required: true,
        },
        {
          name: "bottom",
          description: "‰∏ãÈÉ®ÊñáÂ≠óÂàó",
          type: SlashCommandOptionType.STRING,
          required: true,
        },
        {
          name: "type",
          description: "ÁîªÂÉè„ÅÆÊã°ÂºµÂ≠ê",
          choices: [
            { name: "png(„ÅäÂãß„ÇÅ)", value: "png" },
            { name: "jpg", value: "jpg" },
            { name: "webp", value: "webp" },
          ],
          type: SlashCommandOptionType.STRING,
          required: true,
        },
        {
          name: "quality",
          description: "ÁîªÂÉè„ÅÆÁîªË≥™",
          choices: [
            { name: "‰Ωé", value: "30" },
            { name: "‰∏≠", value: "70" },
            { name: "È´ò", value: "100" },
          ],
          type: SlashCommandOptionType.STRING,
          required: true,
        },
        {
          name: "hoshii",
          description: "‰∏ãÈÉ®ÊñáÂ≠óÂàó„Çí„ÄåÊ¨≤„Åó„ÅÑÔºÅ„Äç„Å´Âõ∫ÂÆö„Åô„Çã",
          choices: [
            { name: "Âõ∫ÂÆö„Åô„Çã", value: "true" },
            { name: "Âõ∫ÂÆö„Åó„Å™„ÅÑ", value: "false" },
          ],
          type: SlashCommandOptionType.STRING,
          required: true,
        },
        {
          name: "noalpha",
          description: "ËÉåÊôØËâ≤„ÇíÁôΩ„Å´„Åô„Çã",
          choices: [
            { name: "ÁôΩ„Å´„Åô„Çã", value: "true" },
            { name: "ÁôΩ„Å´„Åó„Å™„ÅÑ", value: "false" },
          ],
          type: SlashCommandOptionType.STRING,
          required: true,
        },
        {
          name: "rainbow",
          description: "ËôπËâ≤„Å´„Åô„Çã",
          choices: [
            { name: "ËôπËâ≤„Å´„Åô„Çã", value: "true" },
            { name: "ËôπËâ≤„Å´„Åó„Å™„ÅÑ", value: "false" },
          ],
          type: SlashCommandOptionType.STRING,
          required: true,
        },
      ],
    },
  ];
  commands.forEach((command) => {
    client.interactions.commands
      .create(command)
      .then((cmds) => console.log(`Created Slash Command ${cmds.name}!`))
      .catch(() => {
        console.log(`Failed to create ${command.name} command!`);
        client.interactions.commands
          .create(command)
          .then((cmds) => console.log(`Created Slash Command ${cmds.name}!`))
          .catch(() => {
            console.log(`Failed to create ${command.name} command!`);
            client.interactions.commands
              .create(command)
              .then((cmds) =>
                console.log(`Created Slash Command ${cmds.name}!`)
              )
              .catch(() =>
                console.log(`Failed to create ${command.name} command!`)
              );
          });
      });
  });
  console.log(`Ready! User: ${client.user?.tag}`);
  const siezds = await client.guilds.size();
  client.setPresence({
    activity: {
      name: `/help | ${siezds} server`,
      type: ActivityType.Playing,
    },
    status: "online",
  });
  setInterval(async () => {
    const siezd = await client.guilds.size();
    client.setPresence({
      activity: {
        name: `/help | ${siezd} server`,
        type: ActivityType.Playing,
      },
      status: "online",
    });
  }, 10000);
});
client.on("guildCreate", async (guild: Guild) => {
  const ch = await client.channels.get(LOG_CHANNEL_ID);
  if (!ch?.isText()) return;
  await ch.send({
    embeds: [
      new Embed()
        .setTitle("üÜïÔΩú„Çµ„Éº„Éê„ÉºÂèÇÂä†")
        .setDescription(`**${guild.name}**„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü`)
        .setThumbnail({ url: guild.iconURL("webp") })
        .addFields(
          {
            name: "üÜîÔΩúid",
            value: guild.id,
          },
          {
            name: "üìùÔΩú„Çµ„Éº„Éê„Éº„ÅÆË™¨Êòé",
            value: guild.description || "„Å™„Åó",
          },
          {
            name: "üëëÔΩú„Ç™„Éº„Éä„Éº",
            value: `${(await client.users.get(guild.ownerID || ""))?.tag}ÔΩú${
              guild.ownerID
            }`,
          }
        )
        .setColor("GREEN")
        .setTimestamp(new Date()),
    ],
  });
});
client.on("guildDelete", async (guild: Guild) => {
  const ch = await client.channels.get(LOG_CHANNEL_ID);
  if (!ch?.isText()) return;
  await ch.send({
    embeds: [
      new Embed()
        .setTitle("üò≠ÔΩú„Çµ„Éº„Éê„ÉºÈÄÄÂá∫")
        .setDescription(`**${guild.name}**„Åßkick„Åï„Çå„Åæ„Åó„Åü„ÄÇ`)
        .setThumbnail({ url: guild.iconURL("webp") })
        .addFields(
          {
            name: "üÜîÔΩúid",
            value: guild.id,
          },
          {
            name: "üìùÔΩú„Çµ„Éº„Éê„Éº„ÅÆË™¨Êòé",
            value: guild.description || "„Å™„Åó",
          },
          {
            name: "üëëÔΩú„Ç™„Éº„Éä„Éº",
            value: `${(await client.users.get(guild.ownerID || ""))?.tag}ÔΩú${
              guild.ownerID
            }`,
          }
        )
        .setColor("RED")
        .setTimestamp(new Date()),
    ],
  });
});
client.on("interactionCreate", async (interaction: Interaction) => {
  if (interaction.isApplicationCommand()) {
    await files(interaction.name, client, interaction);
  } else if (interaction.isMessageComponent()) {
    await files(interaction.customID, client, interaction);
  }
});

client.connect();
